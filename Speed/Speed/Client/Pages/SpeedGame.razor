@page "/speedgame"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client;
@using Speed.Shared.Models;
@using Speed.Shared.Models.Enums;
@using System
@using System.Collections
@using System.Text
@using System.Text.Json;
@using Speed.Shared;



<PageTitle>Speed!</PageTitle>

<h3>Speed @username</h3>



@if (!isConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="ConnectToHub">
            Connect!
        </button>

    </div>


}
else
{
    <button style="box-shadow:@newHighlight" class="btn btn-primary form-group-append" @onclick="NewGameHighlight">New Game!</button>

    @if (playerOne)
    {
        @*Top Player Area*@
        <div class="text-center">

            @*Player 2 Hand*@
            @foreach (Card card in gameEngine.P2Hand)
            {
                <img src="card_back.png" class="m-1" width=7% height=auto @onclick="() => SetSelectedCard(card)" />
            }
            @*Player 2 Deck*@
            @if (p2DeckVisible)
            {
                <img src="card_back.png" width=7% height=auto @onclick="() => OnMoreCards()" class="m-5" />
            }
            <span>Opponent's Cards: @P2NumCards</span>
            <br />
        </div>
    }
    else
    {
        <div class='text-center'>
            @*Player 1 Hand*@
            @foreach (Card card in gameEngine.P1Hand)
            {
                <img src="card_back.png" class="m-1" width=7% height=auto @onclick="() => SetSelectedCard(card)" />
            }

            @*Player 1 Draw*@
            @if (p1DeckVisible)
            {
                <img src="card_back.png" width=7% height=auto @onclick="() => OnMoreCards()" class="m-5" />
            }
            <span>Opponent's Cards: @P1NumCards</span>
        </div>
    }

    @*Play Area*@
    <div class="text-center">
        @*Left Draw*@
        <img style="box-shadow:@leftHighlight" src="card_back.png" width=7% height=auto @onclick="() => OnOuterMiddle(true)" class="m-5" />

        @*2 Play Cards*@
        @if (gameEngine.Mid1Discard.Count == 0)
        {
            <img src="card_back.png" width=7% height=auto @onclick="() => OnMiddleClick(gameEngine.Mid1Discard, midNum1)" />
        }
        else
        {
            <img src="@gameEngine.Mid1Discard.Last().ToString()" width=7% height=auto @onclick="() => OnMiddleClick(gameEngine.Mid1Discard, midNum1)" />
        }
        @if (gameEngine.Mid2Discard.Count == 0)
        {
            <img src="card_back.png" width=7% height=auto @onclick="() => OnMiddleClick(gameEngine.Mid2Discard, midNum2)" />
        }
        else
        {
            <img src="@gameEngine.Mid2Discard.Last().ToString()" width=7% height=auto @onclick="() => OnMiddleClick(gameEngine.Mid2Discard, midNum2)" />
        }

        @*Right Draw*@
        <img style="box-shadow:@rightHighlight" src="card_back.png" width=7% height=auto @onclick="() => OnOuterMiddle(false)" class="m-5" />
        @*<span style="color:green; display:@GameEngine.GameService.p2Ready">Player 2 Ready</span>*@
        <br />

    </div>
    @if (!playerOne)
    {
        <div class="text-center">
            @*Player 2 Deck*@
            @if (p2DeckVisible)
            {
                <span>Cards Left: @P2NumCards</span>
                <img src="card_back.png" width=7% height=auto @onclick="() => OnMoreCards()" class="m-5" />
            }
            @*Player 2 Hand*@
            @foreach (Card card in gameEngine.P2Hand)
            {
                <img src="@card.ToString()" class="m-1" width=7% height=auto style="box-shadow:@card.highlight" @onclick="() => SetSelectedCard(card)" />
            }
            <br />
        </div>
    }
    else
    {
        <div class='text-center'>
            @*Player 1 Draw*@
            @if (p1DeckVisible)
            {
                <span>Cards Left: @P1NumCards</span>
                <img src="card_back.png" width=7% height=auto @onclick="() => OnMoreCards()" class="m-5" />
            }
            @*Player 1 Hand*@
            @foreach (Card card in gameEngine.P1Hand)
            {
                <img src="@card.ToString()" class="m-1" width=7% height=auto style="box-shadow:@card.highlight" @onclick="() => SetSelectedCard(card)" />
            }
        </div>
    }

}
<div style="display:@p1Wins">Player 1 Won</div>
<div style="display:@p2Wins">Player 2 Won</div>


@code {

    private HubConnection? hubConnection;
    private string username = string.Empty;
    private string messages = string.Empty;
    private string userMessage = string.Empty;
    private GameEngine gameEngine = new GameEngine();
    private string midNum1 = "one";
    private string midNum2 = "two";
    private int P1NumCards = 15;
    private int P2NumCards = 15;
    private string leftHighlight = "";
    private string rightHighlight = "";
    private string p1Wins = "none";
    private string p2Wins = "none";
    private string newHighlight = "";

    private static Deck? deck;

    private string currentCard = "card_back.png";

    private bool playerOne = false;

    private bool p1DeckVisible = true;
    private bool p2DeckVisible = true;


    /// <summary>
    /// Connects to the gamehub
    /// </summary>
    /// <returns></returns>
    private async Task ConnectToHub()
    {

        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/gamehub")).Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
            messages += msg + "\n";
            Console.Write(messages);

            StateHasChanged();
        });


        hubConnection.On<string, List<Card>>("ReceiveDeck", (user, cards) =>
        {

            Console.WriteLine(user);

            foreach (Card card in cards)
            {
                Console.WriteLine(card.ToString());
            }

            StateHasChanged();
        });

        hubConnection.On<List<Card>>("ReceiveHand", (hand) =>
        {

            foreach (Card card in hand)
            {
                Console.WriteLine(card.ToString());
            }
        });

        hubConnection.On<string>("SetPlayer", (playername) =>
        {

            playerOne = (playername == "Player 1") ? true : false;
        });

        hubConnection.On<List<Card>, List<Card>, List<Card>, List<Card>, List<Card>, List<Card>, List<Card>, List<Card>>("ReceiveGame", (P1Draw, P2Draw, Mid1Draw, Mid2Draw, Mid1Discard, Mid2Discard, P1Hand, P2Hand) =>
        {
            gameEngine.P1Draw = P1Draw;
            gameEngine.P2Draw = P2Draw;
            gameEngine.Mid1Draw = Mid1Draw;
            gameEngine.Mid2Draw = Mid2Draw;
            gameEngine.Mid1Discard = Mid1Discard;
            gameEngine.Mid2Discard = Mid2Discard;
            gameEngine.P1Hand = P1Hand;
            gameEngine.P2Hand = P2Hand;

            P1NumCards = P1Draw.Count();
            P2NumCards = P2Draw.Count();

            p1DeckVisible = true;
            p2DeckVisible = true;

            p1Wins = "none";
            p2Wins = "none";


            StateHasChanged();
        });

        //Selecting a card
        hubConnection.On<List<Card>, List<Card>>("ReceiveSelectedCards", (P1Hand, P2Hand) =>
        {
            gameEngine.P1Hand = P1Hand;
            gameEngine.P2Hand = P2Hand;
            StateHasChanged();
        });

        //Updating middle deck and players hands
        hubConnection.On<List<Card>, List<Card>, List<Card>, string, bool, bool>("ReceiveMiddleDeck", (MidDiscard, P1Hand, P2Hand, midNum, p1Won, p2Won) =>
        {
            if (midNum == "one")
            {
                gameEngine.Mid1Discard = MidDiscard;
            }
            else
            {
                gameEngine.Mid2Discard = MidDiscard;
            }
            gameEngine.P1Hand = P1Hand;
            gameEngine.P2Hand = P2Hand;
            if (p1Won)
            {
                p1Wins = "inline";
            }
            else if (p2Won)
            {
                p2Wins = "inline";
            }
            StateHasChanged();
        });

        //When drawing a card
        hubConnection.On<List<Card>, List<Card>, int, int>("ReceiveDeckandHand", (P1Hand, P2Hand, P1NumDeck, P2NumDeck) =>
        {
            gameEngine.P1Hand = P1Hand;
            gameEngine.P2Hand = P2Hand;
            P1NumCards = P1NumDeck;
            P2NumCards = P2NumDeck;


            if (P1NumCards == 0)
            {
                p1DeckVisible = false;
            }

            if (P2NumCards == 0)
            {
                p2DeckVisible = false;
            }


            StateHasChanged();
        });

        //When flipping over new card in middle
        hubConnection.On<List<Card>, List<Card>, List<Card>, List<Card>>("ReceiveMiddleDecks", async (Mid1Discard, Mid2Discard, Mid1Draw, Mid2Draw) =>
        {
            gameEngine.Mid1Discard = Mid1Discard;
            gameEngine.Mid2Discard = Mid2Discard;
            gameEngine.Mid1Draw = Mid1Draw;
            gameEngine.Mid2Draw = Mid2Draw;
            StateHasChanged();
        });

        hubConnection.On<string>("ReceiveNewGame", (test) =>
        {



            StateHasChanged();
        });

        hubConnection.On<string, string>("ReceiveHighlight", (leftHighlight, rightHighlight) =>
        {
            this.leftHighlight = leftHighlight;
            this.rightHighlight = rightHighlight;
            if (leftHighlight != "" && rightHighlight != "")
            {
                this.leftHighlight = "";
                this.rightHighlight = "";
            }
        });

        hubConnection.On<string, string>("ReceiveNewGameHighlight", (p1NewGame, p2NewGame) =>
        {
            newHighlight = "0px 12px 22px 1px #00FF00;";
            StateHasChanged();
            if(p1NewGame != "" && p2NewGame != "")
            {
                newHighlight = "";
                NewGame();
            }

        });

        await hubConnection.StartAsync();
    }

    /// <summary>
    /// Sends a message to all connected clients
    /// </summary>
    /// <returns></returns>
    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage", username, userMessage);
            Console.WriteLine(userMessage);
            userMessage = string.Empty;
        }
    }

    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    public async void NewGameHighlight()
    {
        await hubConnection.SendAsync("NewGameHighlight", playerOne);
    }

    public async void NewGame()
    {   
        await hubConnection.SendAsync("NewGame");
        Console.WriteLine("New Game has been created");

        p1DeckVisible = true;
        p2DeckVisible = true;
        leftHighlight = "";
        rightHighlight = "";

        // stateHasChanged
        StateHasChanged();
    }

    /// <summary>
    /// Used in signalR communication
    /// </summary>
    /// <returns></returns>
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }


    //Used for testing
    public async void RequestDeck()
    {
        await hubConnection.SendAsync("RequestDeck");
    }

    /// <summary>
    /// Gets the users hand based on if they are player one or player two
    /// </summary>
    public async void RequestHand()
    {
        await hubConnection.SendAsync("RequestHand", playerOne);
    }

    public async void RequestGame()
    {
        await hubConnection.SendAsync("RequestGame");
    }
    public async void SetSelectedCard(Card selectedCard)
    {
        await hubConnection.SendAsync("SetSelectedCard", selectedCard, playerOne);
    }

    public async void OnMiddleClick(List<Card> middleDeck, string midNum)
    {
        await hubConnection.SendAsync("OnMiddleClick", middleDeck, midNum);
    }

    public async void OnMoreCards() //Deck count can go passed 0 into the negatives
    {

        await hubConnection.SendAsync("OnMoreCards", playerOne);
    }

    public async void OnOuterMiddle(bool left)
    {
        OnMiddleHighlight(left);
        await hubConnection.SendAsync("OnOuterMiddle", playerOne);
    }
    public async void OnMiddleHighlight(bool left)
    {
        if (left)
        {
            leftHighlight = "0px 12px 22px 1px #00FF00;";
        }
        else
        {
            rightHighlight = "0px 12px 22px 1px #00FF00;";
        }
        await hubConnection.SendAsync("OnMiddleHighlight", leftHighlight, rightHighlight);
    }


    /// <summary>
    /// Used for printing a card to the console while troubleshooting
    /// </summary>
    public void AssignCardFace(ref Card card)
    {
        currentCard = card.ToString();

    }


}




